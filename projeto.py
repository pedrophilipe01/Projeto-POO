# -*- coding: utf-8 -*-
"""Projeto

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1e5oaiNCjZAqMFr29PmTLIIm4VYjINlgF
"""

# Importando a biblioteca sqlite3 para manipulação de banco de dados SQLite
import sqlite3
# Importando a classe datetime para trabalhar com datas e horas
from datetime import datetime

# Função para conectar ao banco de dados
def conectar_banco():
    # Retorna uma conexão com o banco de dados 'denuncias.db'
    return sqlite3.connect('denuncias.db')

# Função para criar a tabela 'denuncias' caso não exista
def criar_tabela():
    # Conectando ao banco de dados
    conn = conectar_banco()
    # Criando um cursor para executar comandos SQL
    cursor = conn.cursor()
    # Executando o comando SQL para criar a tabela 'denuncias', se não existir

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS denuncias (
            id INTEGER PRIMARY KEY AUTOINCREMENT,  -- Coluna ID que é chave primária e autoincrementada
            titulo TEXT NOT NULL,  -- Coluna Título, não pode ser nula
            descricao TEXT NOT NULL,  -- Coluna Descrição, não pode ser nula
            status TEXT NOT NULL DEFAULT 'Pendente',  -- Coluna Status, com valor default 'Pendente'
            data_criacao TEXT NOT NULL  -- Coluna Data de Criação, não pode ser nula
        )
    ''')
    # Confirmando a execução do comando e fazendo o commit
    conn.commit()
    # Fechando a conexão com o banco de dados
    conn.close()

# Função para registrar uma nova denúncia
def registrar_denuncia(titulo, descricao):
    # Obtendo a data e hora atual no formato 'YYYY-MM-DD HH:MM:SS'
    data_criacao = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    # Conectando ao banco de dados
    conn = conectar_banco()
    # Criando um cursor para executar comandos SQL
    cursor = conn.cursor()
    # Executando o comando SQL para inserir uma nova denúncia
    cursor.execute('''
        INSERT INTO denuncias (titulo, descricao, data_criacao)
        VALUES (?, ?, ?)  -- Usando placeholders para evitar injeção de SQL
    ''', (titulo, descricao, data_criacao))  # Passando os valores para os placeholders
    # Confirmando a execução do comando e fazendo o commit
    conn.commit()
    # Fechando a conexão com o banco de dados
    conn.close()
    # Imprimindo uma mensagem de sucesso
    print("Denúncia registrada com sucesso!")

# Função para exibir todas as denúncias registradas
def exibir_denuncias():
    # Conectando ao banco de dados
    conn = conectar_banco()
    # Criando um cursor para executar comandos SQL
    cursor = conn.cursor()
    # Executando o comando SQL para selecionar todas as denúncias
    cursor.execute('SELECT * FROM denuncias')
    # Armazenando todos os resultados da consulta
    denuncias = cursor.fetchall()
    # Fechando a conexão com o banco de dados
    conn.close()

    # Verificando se há denúncias registradas
    if denuncias:
        # Imprimindo os dados de cada denúncia
        for denuncia in denuncias:
            print(f"ID: {denuncia[0]}\nTítulo: {denuncia[1]}\nDescrição: {denuncia[2]}\nStatus: {denuncia[3]}\nData de Criação: {denuncia[4]}\n" + "-"*40)
    else:
        # Caso não haja denúncias, informando o usuário
        print("Não há denúncias registradas.")

# Função para alterar o status de uma denúncia
def alterar_status(id_denuncia, novo_status):
    # Conectando ao banco de dados
    conn = conectar_banco()
    # Criando um cursor para executar comandos SQL
    cursor = conn.cursor()
    # Executando o comando SQL para atualizar o status de uma denúncia
    cursor.execute('''
        UPDATE denuncias
        SET status = ?  -- Atualizando o status da denúncia
        WHERE id = ?  -- Filtrando pela ID da denúncia
    ''', (novo_status, id_denuncia))  # Passando os valores para os placeholders
    # Confirmando a execução do comando e fazendo o commit
    conn.commit()
    # Fechando a conexão com o banco de dados
    conn.close()
    # Imprimindo uma mensagem de sucesso
    print(f"Status da denúncia {id_denuncia} alterado para {novo_status}.")

# Função para exibir o menu de opções para o usuário
def menu():
    # Imprimindo o título do sistema
    print("\nSistema de Denúncias Anônimas")
    # Imprimindo as opções disponíveis para o usuário
    print("1. Registrar Denúncia")
    print("2. Exibir Denúncias")
    print("3. Alterar Status")
    print("4. Sair")

    # Recebendo a opção escolhida pelo usuário
    opcao = input("Escolha uma opção: ")

    # Verificando a opção escolhida pelo usuário
    if opcao == '1':
        # Caso a opção seja '1', registramos uma nova denúncia
        titulo = input("Título: ")
        descricao = input("Descrição: ")
        registrar_denuncia(titulo, descricao)
    else:
        # Caso a opção não seja '1', verificamos a segunda opção
        if opcao == '2':
            # Caso a opção seja '2', exibimos as denúncias registradas
            exibir_denuncias()
        else:
            # Caso a opção não seja '2', verificamos a terceira opção
            if opcao == '3':
                # Caso a opção seja '3', alteramos o status de uma denúncia
                id_denuncia = int(input("ID da denúncia: "))
                novo_status = input("Novo status (Pendente, Resolvido, Em andamento): ")
                alterar_status(id_denuncia, novo_status)
            else:
                # Caso a opção não seja nenhuma das anteriores, informamos que a opção é inválida
                if opcao == '4':
                    print("Saindo...")  # Caso a opção seja '4', o sistema irá sair
                else:
                    # Caso qualquer outra opção seja digitada, informamos que é inválida
                    print("Opção inválida.")

# Criando a tabela e iniciando o menu
criar_tabela()  # Criando a tabela de denúncias caso não exista
menu()  # Chamando a função menu para iniciar o processo